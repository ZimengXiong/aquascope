searchState.loadedDescShard("measureme", 0, "This crate provides a library for high-performance event …\nAn address within a data stream. Each data stream has its …\nCreated by …\nThe max value we can represent with the 48 bits available. …\nThe max value we can represent with the 48 bits available.\n<code>RawEvent</code> is how events are stored on-disk. If you change …\nWhen dropped, this <code>TimingGuard</code> will record an “end” …\nProfiling counters and their implementation.\nThe end value assuming self is an interval\nAll binary files generated by measureme have a simple file …\nCreates the corresponding “end” event for the “start…\nThis method set a new <code>event_id</code> right before actually …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a copy of all data written so far. This method is …\nRecords an event with the given parameters. The event time …\nRecords an event with the given parameters. The event time …\nThis module contains functionality specific to to the …\nThis function reconstructs the individual data streams …\nCreates a “start” event and returns a <code>TimingGuard</code> that …\nCreates a “start” event and returns a <code>DetachedTiming</code>. …\nThe start value assuming self is an interval\nA string table implementation with a tree-like encoding.\nThe value assuming self is an interval or integer.\nAtomically writes <code>num_bytes</code> of data to this …\nAtomically writes the data in <code>bytes</code> to this …\n“Instructions retired” hardware performance counter …\nMore accurate <code>Instructions</code> (subtracting hardware interrupt …\n(Experimental) Like <code>InstructionsMinusIrqs</code> (but using an …\n“Monotonic clock” with nanosecond precision (using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn <code>EventId</code> is a <code>StringId</code> with the additional guarantee …\nEvent IDs are strings conforming to the following grammar:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an EventId from a raw u64 value. Only used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of the file header in bytes. Note that functions …\nThe id of the profile metadata string entry.\nAnything that implements <code>SerializableString</code> can be written …\nA single component of a string. Used for building …\nA <code>StringId</code> is used to identify a string in the <code>StringTable</code>…\nWrite-only version of the string table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a mapping so that <code>virtual_id</code> will resolve to the …")