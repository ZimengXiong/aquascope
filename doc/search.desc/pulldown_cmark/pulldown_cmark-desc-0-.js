searchState.loadedDescShard("pulldown_cmark", 0, "Pull parser for CommonMark. This crate provides a Parser …\nTable column text alignment.\nAutolink like <code>&lt;http://foo.bar/baz&gt;</code>\nA borrowed string.\nAn owned, immutable string.\nAn inline code node.\nA code block.\nCodeblock kind.\nCollapsed link like <code>[foo][]</code>\nCollapsed link without destination in the document, but …\nA copy-on-write string that can be owned, borrowed or …\nExtension to allow headings to have ID and classes.\nEmail address in autolink like <code>&lt;john@example.org&gt;</code>\nEnd of a tagged element.\nMarkdown events that are generated in a preorder traversal …\nThe value contained in the tag describes the language of …\nA footnote definition. The value contained is the footnote…\nA reference to a footnote with given label, which may or …\nA hard line break.\nA heading. The first field indicates the level of the …\nAn HTML node.\nAn image. The first field is the link type, the second the …\nInline link like <code>[foo](bar)</code>\nAn inline string that can contain almost three words of …\nA short inline string.\nReturned when trying to convert a <code>usize</code> into a <code>Heading</code> but …\nA list item.\nA link. The first field is the link type, the second the …\nContains the destination URL, title and source span of a …\nType specifier for inline links. See the Tag::Link for …\nA list. If the list is ordered the field indicates the …\nDefault text alignment.\nMarkdown event and source range iterator.\nOption struct containing flags for enabling extra features …\nA paragraph of text and other inline elements.\nMarkdown event iterator.\nKeeps track of the reference definitions defined in the …\nReference link like <code>[foo][bar]</code>\nReference without destination in the document, but …\nA horizontal ruler.\nShortcut link like <code>[foo]</code>\nShortcut without destination in the document, but resolved …\nA soft line break.\nStart of a tagged element. Events that are yielded after …\nA table. Contains a vector describing the text-alignment …\nA table header. Contains only <code>TableCell</code>s. Note that the …\nA table row. Is used both for header rows as body rows. …\nTags for elements that can contain other elements.\nA task list marker, rendered as a checkbox in HTML. …\nA text node.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nUtility functions for HTML escaping. Only useful when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nPerforms a lookup on reference label using unicode case …\nHTML renderer that takes an iterator of events as input.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the event iterator and produces an iterator that …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nProvides an iterator over all the document’s reference …\nCreates a new event iterator for a markdown string without …\nCreates a new event iterator for a markdown string with …\nIn case the parser encounters any potential links that …\nReturns the complement of this set of flags.\nReturns a reference to the internal <code>RefDefs</code> object, which …\nReturns a reference to the internal reference definition …\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nTrait that allows writing string slices. This is basically …\nThis wrapper exists because we can’t have both a blanket …\nWrites an href to the buffer, escaping href unsafe bytes.\nWrites the given string to the Write sink, replacing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over an <code>Iterator</code> of <code>Event</code>s, generate HTML for each …\nIterate over an <code>Iterator</code> of <code>Event</code>s, generate HTML for each …")