searchState.loadedDescShard("miri", 0, "Isolated op is rejected with an abort of the machine.\nIndicates which kind of access is being performed.\nExtra per-allocation data\nExecute op requiring communication with the host, i.e. …\nJumping to the next block has already been taken care of.\nValid atomic fence orderings, subset of atomic::Ordering.\nValid atomic read orderings, subset of atomic::Ordering.\nValid atomic read-write orderings, alias of …\nValid atomic write orderings, subset of atomic::Ordering.\nKeeps track of what the thread is blocked on.\nTracking pointer provenance\nWhich borrow tracking method to use\n<code>malloc</code> memory.\nA specific moment in time.\nHolds all of the relevant data for when unwinding hits a …\nA monotone clock used for <code>Instant</code> simulation.\nFor pointers with concrete provenance. we exactly know …\nBlocked on a condition variable.\n0 is used to indicate that the id was not yet assigned and,\n(new_tag, new_perm, (alloc_id, base_offset, orig_tag))\nWe support <code>expose_provenance</code>/<code>with_exposed_provenance</code> via …\nGrants no access, but separates two groups of …\nType of dynamic symbols (for <code>dlsym</code> et al)\nWhat needs to be done after emulating an item (a shim or …\nMemory for extern statics. This memory may leak.\nExtra data stored with each stack frame\nPrints a backtrace with all possible information.\nBlocked on a Futex variable.\nGlobals copied from <code>tcx</code>. This memory may leak.\nBlocked on an InitOnce.\n0 is used to indicate that the id was not yet assigned and,\nCheck alignment on the actual physical integer address.\nAn item in the per-location borrow stack.\nThe thread tried to join the specified thread and is …\nInsert rustc arguments at the beginning of the argument …\nMemory for args, errno, and other parts of the …\n<code>miri_alloc</code> memory.\nAllocation bytes that explicitly handle the layout of the …\nConfiguration needed to spawn a Miri instance.\nA rustc InterpCx for Miri.\nA little trait that’s useful to be inherited by …\nThe machine itself.\nExtra memory kinds\nMemory mapped directly by the program\nBlocked on a mutex.\n0 is used to indicate that the id was not yet assigned and,\nThe caller is expected to jump to the return block.\nThe caller is expected to jump to the unwind block.\nDon’t retag any fields.\nIf not Abort, miri returns an error for an isolated op. …\nMiri specific diagnostics\nDo not check alignment.\nThe item is not supported.\nPrints only the frame that the error occurs in.\nOnly retag fields of types with Scalar and ScalarPair …\nIndicates which permission is granted (by this item to …\nLike <code>Default</code>, but without the warning.\nThis <code>Item</code> was popped from the borrow stack. The string …\nPrecomputed layouts of primitive types\nPointer provenance.\nThe “extra” information a pointer has over a regular …\nReject an op requiring communication with the host. By …\nPolicy on whether to recurse into fields to retag\nMemory allocated by the runtime (e.g. env vars). Separate …\n<code>__rust_alloc</code> memory.\nBlocked on a reader-writer lock.\n0 is used to indicate that the id was not yet assigned and,\nGrants shared read-only access.\nGrants shared mutable access.\nPrints a terser backtrace which ideally only contains …\nWaiting for time to pass.\nExtra per-location state.\nStacked Borrows, as implemented in …\nExtra per-allocation state.\nWe error on <code>with_exposed_provenance</code>, ensuring no precision …\nCheck alignment “symbolically”, i.e., using only the …\nDetails of premature program termination.\nA thread identifier.\nA set of threads.\nMemory for thread-local statics. This memory may leak.\nTree structure with both parents and children since we …\nTree borrows, as implemented in borrow_tracker/tree_borrows\nGrants unique mutable access.\nPrint a warning about rejected isolated op, with backtrace.\nPrint a warning about rejected isolated op, without …\nPointers with wildcard provenance are created on …\nWindows <code>HeapAlloc</code> memory.\nWindows “local” memory (to be freed with <code>LocalFree</code>)\nRetag all fields.\nGet a mutable borrow of the currently active thread.\nGet a shared borrow of the currently active thread.\nBorrow the stack of the active thread.\nProbability for address reuse across threads.\nProbability for address reuse.\nPtr-int-cast module global data.\nReturn the <code>anchor</code> instant, to convert between monotone …\nCommand-line arguments passed to the interpreted program.\nA backtrace to where this allocation was allocated. As …\nWhich style to use for printing backtraces.\nCheck that an access on the entire range is permitted, and …\nCheck that this pointer has permission to deallocate this …\nExtra data for the Borrow Tracker.\nGlobal data for borrow tracking.\nDetermines if Stacked Borrows or Tree Borrows is enabled.\nGlobal state of the borrow tracker, if enabled.\nReturns the span of the <em>caller</em> of the current operation, …\nIf this is Some(), then this is a special “catch unwind…\nControls alignment checking.\nRate of spurious failures for compare_exchange_weak atomic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nWhether to collect a backtrace when each allocation is …\nReturns a freshly created <code>InterpCx</code>. Public because this is …\nGenerate a new TLS key with the given destructor. <code>max_size</code> …\nGet the current span in the topmost function which is …\nData race detector global data.\nData race detection via the use of a vector-clock. This is …\nDetermine if data race detection should be enabled\nDeallocation requires\nThe default to be used when borrow tracking is disabled\nFind all <code>Unique</code> elements in this borrow stack above …\nThe host environment snapshot to use as basis for what is …\nEvaluates the entry function specified by <code>entry_id</code>. …\nCalled on <code>ptr as usize</code> casts. (Actually computing the …\nEnvironment variables that should always be forwarded from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun a garbage collector for BorTags every N basic blocks.\nRead-only lookup (avoid read-acquiring the RefCell).\nGet the id of the currently active thread.\nGet the total of threads that are currently live, i.e., …\nThe most interesting method: Providing a shared reference …\nGet the name of the given thread.\nGet the total number of threads that were ever spawn by …\nDebug helper: assign name to tag.\nDetermines if memory leaks should be ignored.\nSets up the “extern statics” for this machine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug helper: determines if the tree contains a tag.\nThis is the source of truth for the <code>is_user_relevant</code> flag …\nIndicates whether a <code>Frame</code> is part of a workspace-local …\nAction for an op requiring communication with the host.\nThis function exists for priroda to be able to iterate …\nProvides read-only iteration over everything in the given …\nProvides iteration over all elements. The iterator also …\nProvides mutable iteration over everything in the given …\nProvides mutable iteration over all elements. The iterator …\nStores the <code>Machine</code> instance.\nIf <code>Some</code>, enable the <code>measureme</code> profiler, writing results to …\nThe virtual memory system.\nRemove all adjacent duplicates\nWhether to ignore any output by the program. This is …\nThe location of a shared object file to load when calling …\nConstruct a new <code>Stack</code> using the passed <code>Item</code> as the root …\nCreate a new tree, with only a root pointer.\nCreate a new clock based on the availability of …\nCreates a new <code>RangeMap</code> for the given size, and with the …\nCreate a new allocation, i.e. a new tree\nInsert a new tag in the tree\nThe number of CPUs to be reported by miri.\nThe minimum representable tag\nRequires Miri to emulate pages of a certain size\nPanic when unsupported functionality is encountered.\nMap the per-node and per-location …\nThe permission this item grants.\nProduces an iterator which iterates over <code>range</code> in reverse, …\nThe probability of the active thread being preempted at …\nDisplay the contents of the tree.\nWhether or not there is a protector for this tag\nWhich provenance to use for int2ptr casts\nCalled on <code>usize as ptr</code> casts.\nConvert a pointer with provenance into an …\nThe recursion limit (cached from <code>tcx.recursion_limit(())</code>)\nA tag just lost its protector.\nEmit a custom diagnostic without going through the …\nReport the current instruction being executed every N …\nWhether Stacked Borrows and Tree Borrows retagging should …\nThe seed to use when non-determinism or randomness are …\nAdditional environment variables that should be set in the …\nSet the thread wide destructor of the thread local storage …\nSet the Permission stored in this Item\nSet the name of the given thread.\nSleep for the desired duration.\nThe pointers the permission is granted to.\nThe results of the type checker, from rustc. The span in …\nLet the time pass for a small interval.\nIf <code>measureme</code> profiling is enabled, holds timing information\nFor the tracked alloc ids, also report read/write accesses.\nTrack when an outdated (weak memory) load happens.\nThe allocation ids to report about.\nThe stacked borrows call IDs to report about\nThe stacked borrows pointer ids to report about\nWhether <code>core::ptr::Unique</code> receives special treatment. If …\nDetermine if validity checking is enabled.\nWeak memory emulation via the use of store buffers. This …\nDetermine if weak memory emulation should be enabled. …\nBorrow Tracker tag.")